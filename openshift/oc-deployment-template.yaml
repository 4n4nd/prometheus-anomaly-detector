apiVersion: v1
kind: Template

metadata:
  name: prometheus-anomaly-detector-deployment-template
  annotations:
    description: "This is an application, which collects prometheus metrics and predicts their future values using fbprophet"
    openshift.io/display-name: "fbprophet metric prediction"
    version: 0.1.0
    tags: fbprophet,prometheus,metrics,anomaly detection
    template.openshift.io/documentation-url: https://github.com/4n4nd/prometheus-anomaly-detector-2
  labels:
    application: ${APPLICATION_NAME}
    template: ${APPLICATION_NAME}-template
    app: ${APPLICATION_NAME}

parameters:
- description: The name for application
  value: 'prometheus-anomaly-detector'
  name: APPLICATION_NAME
  required: true
- name: GIT_URI
  value: https://github.com/4n4nd/prometheus-anomaly-detector-2.git
  required: true
- name: FLT_DEBUG_MODE
  description: Enable verbose log for debugging
  value: 'False'
  required: false
- name: FLT_PROM_URL
  description: url for the prometheus host from where the metrics will be collected
  required: true
- name: FLT_PROM_ACCESS_TOKEN
  description: Oauth token needed to connect to the prometheus host
  required: false
- name: FLT_METRICS_LIST
  description: List of metrics (with labels), that will be collected from prometheus and predicted
  required: true
  value: "thoth_solver_jobs_seconds{instance='metrics-exporter-thoth-frontend-stage.cloud.paas.upshift.redhat.com:80',job='Thoth Metrics (stage)'}"

objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    dockerImageRepository: ${APPLICATION_NAME}
    tags:
    - name: latest
    lookupPolicy:
      local: true

- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    resources:
      limits:
        memory: 4Gi
        cpu: "2"
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      git:
        uri: ${GIT_URI}
      type: Git
    strategy:
      type: Docker
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      deploymentConfig: ${APPLICATION_NAME}
      app: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          deploymentConfig: ${APPLICATION_NAME}
          app: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: FLT_PROM_URL
            value: "${FLT_PROM_URL}"
          - name: FLT_PROM_ACCESS_TOKEN
            value: "${FLT_PROM_ACCESS_TOKEN}"
          - name: FLT_METRICS_LIST
            value: "${FLT_METRICS_LIST}"
          - name: FLT_DEBUG_MODE
            value: "${FLT_DEBUG_MODE}"
          image: ${APPLICATION_NAME}
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}
          resources:
            requests:
              memory: 1Gi
              cpu: "2"
            limits:
              memory: 2Gi
              cpu: "2"
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}-service
    labels:
      app: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      name: http
    selector:
      app: ${APPLICATION_NAME}

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}-route
    labels:
      app: ${APPLICATION_NAME}
  spec:
    to:
      kind: Service
      name: ${APPLICATION_NAME}-service
